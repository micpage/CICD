<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Abbildung der CI/CD als Pipeline-Projekt. Alle Schritte (Build-Steps) werden per Script definiert. &#xd;
https://www.jenkins.io/doc/pipeline/steps/liquibase-runner/</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline {

    agent any
    
    environment {
        //relativ zum Workspace
        PROGRAM = &quot;liquibase_4.4.3&quot;
        PROPERTY_FILE = &apos;RUNNER_ADVANCED/liquibase.properties&apos;
        GIT_URL = &apos;https://github.com/micpage/CICD&apos;
        GIT_CREDENTIALS = &apos;github&apos;
        DB_CREDENTIALS  = &apos;db2inst1&apos;
        JIRA_ID = &apos;DB2LUW-4322&apos;
    }
    
    stages {
        stage (&apos;checkout git repository&apos;){
            steps{
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[credentialsId: &quot;$GIT_CREDENTIALS&quot;, url: &quot;$GIT_URL&quot;]]])
            }
        }
        stage (&apos;pre checks&apos;) {
            steps {
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;validate&apos;])
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;list-locks&apos;])
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;history&apos;])
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;status&apos;])
            }
        }
        stage (&apos;update-sql&apos;) {
            steps {
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;update-sql&apos;])
            }
        }
        stage (&apos;update&apos;) {
            steps {
                step([$class: &apos;UpdateBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;])
            }
        }
        stage (&apos;history&apos;) {
            steps {
                step([$class: &apos;RawCliBuilder&apos; , installationName: &quot;$PROGRAM&quot;, liquibasePropertiesPath: &quot;${WORKSPACE}/RUNNER_ADVANCED/liquibase.properties&quot; , changeLogFile: &quot;${WORKSPACE}/CHANGELOG/changelog-master.xml&quot; , credentialsId: &quot;$DB_CREDENTIALS&quot;, commandArguments: &apos;history&apos;])
            }
        }
        /*
        stage (&apos;Update Jira&apos;) {
            steps {
                jiraAddComment comment: &quot;Jenkins-Pipeline bei Jenkins ${env.JOB_BASE_NAME} ${env.BUILD_ID} ausgef√ºhrt&quot;, failOnError: false, idOrKey: &quot;${JIRA_ID}&quot;, site: &apos;VERA&apos;
                jiraUploadAttachment failOnError: false, file: &quot;${env.JOB_BASE_NAME}_${env.BUILD_ID}_update.log&quot;, idOrKey: &quot;${JIRA_ID}&quot;, site: &apos;VERA&apos;
            }
        }
        */
        /*
        stage(&apos;Email&apos;) {
            steps {
                emailext body: &quot;Test-Email von Jenkins ${env.JOB_BASE_NAME} ${env.BUILD_ID}&quot;, subject: &apos;Test Jenkins&apos;, to: &apos;email@mail.intern&apos;
            }

        }
        */
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>