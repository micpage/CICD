<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.8.4"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.8.4">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.90">
    <script>pipeline {

    agent any
    
    environment {
        //relativ zum Workspace
        GIT_URL = &apos;https://github.com/micpage/CICD&apos;
        GIT_CREDENTIALS = &apos;github&apos;
        MAVEN_PROG = &apos;/maven/bin/mvn&apos;
        MAVEN_POM = &apos;MAVEN_ADVANCED/pom.xml&apos;
        DB_CREDENTIALS  = &apos;db2inst1&apos;
        VERA_ID = &apos;DB2LUW-4322&apos;
    }
    
    stages {
        stage (&apos;checkout git repository&apos;){
            steps{
                checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], extensions: [], userRemoteConfigs: [[credentialsId: &quot;$GIT_CREDENTIALS&quot;, url: &quot;$GIT_URL&quot;]]])
            }
        }
        stage (&apos;pre checks&apos;) {
            steps {
                //sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:validate&quot;
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:listLocks&quot;
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:history&quot;
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:status&quot;
            }
        }
        stage (&apos;update-sql&apos;) {
            steps {
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:updateSQL&quot;
            }
        }
        stage (&apos;update&apos;) {
            steps {
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:update&quot;
            }
        }
        stage (&apos;history&apos;) {
            steps {
                sh  &quot;${MAVEN_PROG} -f ${MAVEN_POM} liquibase:history&quot;
            }
        }
        /*
        stage (&apos;Update Vera&apos;) {
            steps {
                jiraAddComment comment: &quot;Jenkins Pipeline bei JenkinsPR ${env.JOB_BASE_NAME} ${env.BUILD_ID} ausgef√ºhrt&quot;, failOnError: false, idOrKey: &quot;$VERA_ID&quot;, site: &apos;VERA&apos;
                jiraUploadAttachment failOnError: false, file: &quot;${env.JOB_BASE_NAME}_${env.BUILD_ID}_update.log&quot;, idOrKey: &quot;$VERA_ID&quot;, site: &apos;VERA&apos;
            }
        }
        */
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>